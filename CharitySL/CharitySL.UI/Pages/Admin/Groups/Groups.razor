@page "/admin/group"
@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Group Management</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h5" Style="text-align:center">Group Management</MudText>
        <MudDataGrid Class="pa-2 mb-4" T="GroupModel" Elevation="5" Items="@filteredData" Filterable QuickFilter="@_quickFilter"
                     Hideable Loading="@isLoading" LoadingProgressColor="Color.Success" Dense Style="background: #d3d3d34f">
            <ToolBarContent>
                <MudItem xs="4" md="4">
                    <MudTextField @bind-Value="searchTerm" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                </MudItem>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.GroupAdd" OnClick="CreateClick">Create Group</MudButton>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" SortBy="new Func<GroupModel, object>(x=>x.Name)" />
                <TemplateColumn Title="Description">
                    <CellTemplate Context="group">
                        @if (!string.IsNullOrEmpty(group.Item.Description) && group.Item.Description.Length > 45)
                        {
                            <MudTooltip Text="@group.Item.Description">
                                <span>@group.Item.Description.Substring(0, 45)...</span>
                            </MudTooltip>
                        }
                        else
                        {
                            <span>@group.Item.Description</span>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <CellTemplate Context="Actions">
                        <MudButtonGroup Style="margin:-5px">
                            <MudTooltip Text="View"><MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" OnClick="() => NavigateToDetails(Actions.Item.Id, false)" /></MudTooltip>
                            <MudTooltip Text="Update"><MudIconButton Color="Color.Dark" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => NavigateToDetails(Actions.Item.Id, true)" /></MudTooltip>
                            <MudTooltip Text="Delete"><MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => OpenDeleteDialog(Actions.Item.Id)" /></MudTooltip>
                        </MudButtonGroup>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="GroupModel" PageSizeOptions=@(new int[] { 10, 20, 30, 40, 50, 100 }) />
            </PagerContent>
        </MudDataGrid>
    </Authorized>
</AuthorizeView>



@code {
    private IEnumerable<GroupModel> groupsList = Enumerable.Empty<GroupModel>();
    private IEnumerable<GroupModel> filteredData = Enumerable.Empty<GroupModel>();
    private bool isLoading = true;
    private string WebApiAddress => Configuration["WebApiAddress"];
    private bool showDeleteModal = false;
    private int groupIdToDelete;
    private string searchTerm = string.Empty;
    private IDialogReference deleteDialogReference;

    protected override async Task OnInitializedAsync() => await LoadGroupsAsync();

    private async Task LoadGroupsAsync()
    {
        isLoading = true;
        groupsList = await Http.GetFromJsonAsync<GroupModel[]>($"{WebApiAddress}/api/group");
        filteredData = groupsList;
        isLoading = false;
    }

    private void CreateClick()
    {
        NavigationManager.NavigateTo("/admin/group/create");
    }

    private void NavigateToDetails(int groupId, bool isEditMode)
    {
        if (isEditMode)
            NavigationManager.NavigateTo($"/admin/group/details/{groupId}/update");
        else
            NavigationManager.NavigateTo($"/admin/group/details/{groupId}");
    }

    private async Task DeleteGroupAsync()
    {
        var response = await Http.DeleteAsync($"{WebApiAddress}/api/group/{groupIdToDelete}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Group deleted successfully.", Severity.Success);
            deleteDialogReference?.Close();
            await LoadGroupsAsync();
        }
        else
        {
            Snackbar.Add("Error deleting group.", Severity.Error);
        }
    }

    private void OpenDeleteDialog(int id)
    {
        groupIdToDelete = id;

        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this group?" },
            { "IsDelete", true },
            { "DeleteBtnClick", EventCallback.Factory.Create(this, DeleteGroupAsync) },
            { "Color", Color.Error }
        };

        deleteDialogReference = DialogService.Show<AlertDialog>("Delete", parameters);
    }

    private void CancelDelete() => showDeleteModal = false;

    private Func<GroupModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        if (x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Description) && x.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
